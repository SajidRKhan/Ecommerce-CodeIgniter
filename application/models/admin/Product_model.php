<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Product_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
		$this->load->model("admin/Productcat_model");
		$this->load->model("admin/Productgallery_model");
    }
    
    /*
     * Get product by ProductId
     */
    function get_product($ProductId)
    {
        return $this->db->get_where('product',array('ProductId'=>$ProductId,'IsDelete'=>0))->row_array();
    }
    
    /*
     * Get all product count
     */
    function get_all_product_count()
    {
        return $this->db->query("select count(*) as totalrows from product where saleenddate >= CURRENT_DATE() and isdelete=0 and isdirectaccess=0 ")->row()->totalrows;
    }
	
	
	
	function get_all_product_count2()
    {
        return $this->db->query("select count(*) as totalrows from product where isdelete=0 and isdirectaccess=0")->row()->totalrows;
    }
	
	function get_all_product_count_expire()
    {
		
        return $this->db->query("select count(*) as totalrows from product where saleenddate < CURRENT_DATE() and isdelete=0 and isdirectaccess=0")->row()->totalrows;
    }
        
    /*
     * Get all product
     */
    function get_all_product($params = array())
    {
        $this->db->order_by('ProductId', 'desc');
        if(isset($params) && !empty($params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
		
		$result =$this->db->get_where('product',array('isdelete'=>0))->result_array();
		$resultArray = array();
		foreach($result as $row)
		{
			$row["ProductCatName"]=$this->Productcat_model->get_productcat($row["ProductCatId"])["CatName"];
			$temp = $this->Productgallery_model->get_product_featureimage($row["ProductId"]);
			if($temp)
			{
				$row["Featured"]=$temp->ImagePath;	
			}
			else{
				$row["Featured"]="";
			}
			
			
			array_push($resultArray,$row);
		}
		
        return $resultArray;
    }
	
	function reschedule()
	{
		$result=$this->db->query("select * from product where saleenddate < CURRENT_DATE() and isdelete=0 and isdirectaccess=0 order by productid desc ")->result_array();
		
		$resultArray = array();
		foreach($result as $row)
		{
			$this->db->where("productid",$row["ProductId"]);
			
			$saleEndDate = $row["saleenddate"];
			$newDate =  date('Y-m-d', strtotime($saleEndDate. ' + 15 days'));
			$this->db->update("product",array("saleenddate"=>$newDate));
		}
		
	}
	
	function get_all_expired_product()
	{
		// $this->db->order_by('ProductId', 'desc');
        // $this->db->where("saleenddate<","CURRENT_DATE()");
		// $this->db->where("isdelete",0);
		
		
		$result=$this->db->query("select * from product where saleenddate < CURRENT_DATE() and isdelete=0 and isdirectaccess=0 order by productid desc ")->result_array();
		//
		
		//$result =$this->db->get('product')->result_array();
		$resultArray = array();
		foreach($result as $row)
		{
			$row["ProductCatName"]=$this->Productcat_model->get_productcat($row["ProductCatId"])["CatName"];
			$temp = $this->Productgallery_model->get_product_featureimage($row["ProductId"]);
			if($temp)
			{
				$row["Featured"]=$temp->ImagePath;	
			}
			else{
				$row["Featured"]="";
			}
			
			
			array_push($resultArray,$row);
		}
		
        return $resultArray;
	}
	
	
        
    /*
     * function to add new product
     */
    function add_product($params)
    {
		$params["Slug"]=slugify($params["ProductName"]);
        
		$this->db->insert('product',$params);
        return $this->db->insert_id();
    }
    
	
	function duplicate_product($ProductId)
	{
			$product = $this->get_product($ProductId);
			
			$product["ProductName"]=$product["ProductName"]."_".strtotime(date("y-m-d h:i:s"));
			$product["Slug"]=slugify($product["ProductName"]);
			unset($product["IsDelete"]);
			unset($product["ProductId"]);
			unset($product["CreatedDate"]);
			
			$newProductId=$this->add_product($product);
			
			$productGallery=$this->Productgallery_model->get_productimages($ProductId);
			
			array_push($productGallery, ((array)$this->Productgallery_model->get_product_featureimage($ProductId)));
			
			$newGallery=array();
			foreach($productGallery as $img)
			{
				unset($img["ProductGalleryId"]);
				unset($img["CreatedDate"]);
				unset($img["IsDelete"]);
				$img["ProductId"]=$newProductId;
				
				if($img["IsFeatured"]==0)
				{
					$img["IsFeatured"]=false;
				}
				else{
					$img["IsFeatured"]=true;
				}
			
			
				$this->Productgallery_model->add_productgallery($img);			
				
			}
			
			
			
			return $newProductId;
	}
	
    /*
     * function to update product
     */
    function update_product($ProductId,$params)
    {
		$params["Slug"]=slugify($params["ProductName"]);
        $this->db->where('ProductId',$ProductId);
	
        return $this->db->update('product',$params);
    }
    
	
	function IsNewThankyouPage($orderId)
	{
		$result = $this->db->query("select p.isnewthankpage from product p join orders o on p.ProductId = o.ProductId where o.OrderId=".$orderId." limit 1 ")->row();
		
		
		if($result)
		{
			if($result->isnewthankpage=='1')
			{
				return true;
			}
		}
		return false;
	}
	
    /*
     * function to delete product
     */
    function delete_product($ProductId)
    {
		$this->db->where("ProductId",$ProductId);
        return $this->db->update('product',array('isdelete'=>1));
    }
	
	function GetLatestProducts($records)
	{
		$query="SELECT p.*,(select pg.imagepath from productgallery pg where pg.IsDelete=0 and pg.IsFeatured=1 and pg.ProductId=p.productid limit 1)as FeaturedImage,pc.CatName as ProductCatname
FROM product p join productcat pc on p.productcatid=pc.ProductCatId
where p.saleenddate>=CURRENT_DATE()
and p.isdraft=0
and p.isdelete=0
and p.isdirectaccess=0
order by p.createddate desc
limit ".$records."
";
	return $this->db->query($query)->result();
	}
	
	
	function GetActiveProducts($param)
	{
		$query="SELECT p.*,(select pg.imagepath from productgallery pg where pg.IsDelete=0 and pg.IsFeatured=1 and pg.ProductId=p.productid limit 1)as FeaturedImage,pc.CatName as ProductCatname
FROM product p join productcat pc on p.productcatid=pc.ProductCatId
where p.saleenddate>=CURRENT_DATE()
and p.isdraft=0
and p.isdelete=0
and p.isdirectaccess=0
order by p.createddate desc
limit ".$param["limit"]."
offset ".$param["offset"]."
";
	return $this->db->query($query)->result();
	}
	
	
	function GetExpireProducts($param)
	{
		$query="SELECT p.*,(select pg.imagepath from productgallery pg where pg.IsDelete=0 and pg.IsFeatured=1 and pg.ProductId=p.productid limit 1)as FeaturedImage,pc.CatName as ProductCatname
FROM product p join productcat pc on p.productcatid=pc.ProductCatId
where p.saleenddate<CURRENT_DATE()
and p.isdraft=0
and p.isdelete=0
and p.isdirectaccess=0
order by p.createddate desc
limit ".$param["limit"]."
offset ".$param["offset"]."
";
	return $this->db->query($query)->result();
	}
	
	
	function GetSearchProducts($param)
	{
		$query="SELECT p.*,(select pg.imagepath from productgallery pg where pg.IsDelete=0 and pg.IsFeatured=1 and pg.ProductId=p.productid limit 1)as FeaturedImage,pc.CatName as ProductCatname
FROM product p join productcat pc on p.productcatid=pc.ProductCatId
where p.productname like '%".$param["searchterm"]."%'
and p.isdraft=0
and p.isdelete=0
and p.isdirectaccess=0
order by p.createddate desc
limit ".$param["limit"]."
offset ".$param["offset"]."
";
	return $this->db->query($query)->result();
	}
	
	
	function GetProductCategory($param)
	{
		$query="SELECT p.*,(select pg.imagepath from productgallery pg where pg.IsDelete=0 and pg.IsFeatured=1 and pg.ProductId=p.productid limit 1)as FeaturedImage,pc.CatName as ProductCatname
FROM product p join productcat pc on p.productcatid=pc.ProductCatId
where pc.ProductCatId =".$param["productCatId"]."
and p.isdelete=0
and p.isdirectaccess=0
order by p.createddate desc
limit ".$param["limit"]."
offset ".$param["offset"]."
";
	return $this->db->query($query)->result();
	}
	
	
	
	function GetProductDetail($slug,$productId)
	{
		$productQuery = $this->db->query("SELECT p.*,pc.CatName as ProductCatname
				FROM product p join productcat pc on p.productcatid=pc.ProductCatId
				where p.ProductId=".$productId."
				and p.isdelete=0
				order by p.createddate desc
				limit 1")->row();
				
		
		
		$productGallery = $this->db->query("select * from productgallery where isdelete=0 and productid=".$productId." order by isfeatured desc ")->result();		
		
	$productQuery		= (array)$productQuery;
	$productQuery["ProductImages"] = $productGallery;
	$productQuery=(object)$productQuery;
	
	return $productQuery;
	
	}
	
	
	function GetRelatedProducts($productId,$productCatId)
	{
		$query="SELECT p.*,(select pg.imagepath from productgallery pg where pg.IsDelete=0 and pg.IsFeatured=1 and pg.ProductId=p.productid limit 1)as FeaturedImage,pc.CatName as ProductCatname
FROM product p join productcat pc on p.productcatid=pc.ProductCatId
where p.saleenddate>=CURRENT_DATE()
and pc.ProductCatId=".$productCatId."
and p.ProductId<>".$productId."
and p.isdraft=0
and p.isdelete=0
and p.isdirectaccess=0
order by p.createddate desc
limit 6
";
	return $this->db->query($query)->result();
	}
	
}
