<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Order_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get order by OrderId
     */
    function get_order($OrderId)
    {
		
        return $this->db->query("select o.OrderId,o.ProductVariation,os.OrderStatus,os.OrderStatusId,o.OrderNotes,o.CreatedDate as OrderDate,p.ProductId,p.ProductName,c.FirstName,c.LastName,
		o.CODAmount,o.ShippingCost,c.CustomerId,
c.Cell1,c.Cell2,c.ShippingAddress,c.City,c.NearMostFamousPlace,c.Email
from orders o 
join orderstatus os on o.OrderStatusId = os.OrderStatusId
join product p on o.ProductId=p.ProductId
join customer c on o.customerid = c.CustomerId
where o.OrderId=".$OrderId."
and o.isdelete=0
order by o.OrderId desc
")->row_array();
    }
	
	
	function get_order_print($OrderId,$orderStatusId)
    {
		
		if(isset($OrderId) && is_numeric($OrderId))
		{
		$query = "select o.OrderId,c.FirstName as Consignee,
		concat(c.ShippingAddress,'(','Famous Place:',c.NearMostFamousPlace,')') as ShippingAddress, 
		c.City,
		c.Cell1,
		c.Cell2,
		p.ProductName,
		(o.CODAmount+o.ShippingCost) as TotalCOD				
		from orders o
		join orderstatus os on o.OrderStatusId = os.OrderStatusId
		join product p on o.ProductId=p.ProductId
		join customer c on o.customerid = c.CustomerId
		where o.isdelete=0
		and o.orderid=".$OrderId."
		and os.OrderStatusId='".$orderStatusId."'
		order by o.OrderId desc
		";
		
		return $this->db->query($query)->row();
		}
    }
    
    /*
     * Get all orders count
     */
    function get_all_orders_count($orderStatusId)
    {
		$this->db->where('isdelete',0);
		if($orderStatusId!='all')
		{
			$this->db->where('orderstatusid',$orderStatusId);
		}
        $this->db->from('orders');
        return $this->db->count_all_results();
    }
        
    /*
     * Get all orders
     */
    function get_all_orders($params = array())
    {   		
		if(!$params['orderstatusid'])
		{
			$this->db->where("orderstatus","Processing");
			$params['orderstatusid']=$this->db->get("orderstatus")->row()->OrderStatusId;		 
		}
		
		if($params["searchTerm"])
		{
		
		if($params['orderstatusid']=="all")
		{
			return $this->db->query("select o.OrderId,os.OrderStatus,o.ProductVariation,o.OrderNotes,o.CreatedDate as OrderDate,p.ProductName,concat(c.FirstName,' ',c.LastName) as CustomerName, (o.CODAmount+o.ShippingCost) as TotalCOD,
		c.Cell1,c.Cell2,c.ShippingAddress,c.City,p.isnewthankpage
		from orders o 
		join orderstatus os on o.OrderStatusId = os.OrderStatusId
		join product p on o.ProductId=p.ProductId
		join customer c on o.customerid = c.CustomerId
		where o.isdelete=0				
		and (
			c.cell1 like '%".$params["searchTerm"]."%'
			or c.cell2 like '%".$params["searchTerm"]."%'
			or c.FirstName like '%".$params["searchTerm"]."%'
			or o.OrderId='".$params["searchTerm"]."'
			or c.City like '%".$params["searchTerm"]."%'
			or c.ShippingAddress like '%".$params["searchTerm"]."%'
			or p.ProductName like '%".$params["searchTerm"]."%'
		)
		order by o.OrderId desc")->result_array();
		}
		
		
		return $this->db->query("select o.OrderId,os.OrderStatus,o.ProductVariation,o.OrderNotes,o.CreatedDate as OrderDate,p.ProductName,concat(c.FirstName,' ',c.LastName) as CustomerName, (o.CODAmount+o.ShippingCost) as TotalCOD,
		c.Cell1,c.Cell2,c.ShippingAddress,c.City,p.isnewthankpage
		from orders o 
		join orderstatus os on o.OrderStatusId = os.OrderStatusId
		join product p on o.ProductId=p.ProductId
		join customer c on o.customerid = c.CustomerId
		where o.isdelete=0		
		and o.OrderStatusId=".$params['orderstatusid']."
		and (
			c.cell1 like '%".$params["searchTerm"]."%'
			or c.cell2 like '%".$params["searchTerm"]."%'
			or c.FirstName like '%".$params["searchTerm"]."%'
			or o.OrderId='".$params["searchTerm"]."'
			or c.City like '%".$params["searchTerm"]."%'
			or c.ShippingAddress like '%".$params["searchTerm"]."%'
			or p.ProductName like '%".$params["searchTerm"]."%'
		)
		order by o.OrderId desc")->result_array();
		}
		else if($params['orderstatusid']!="all")
		{
			return $this->db->query("select o.OrderId,os.OrderStatus,o.ProductVariation,o.OrderNotes,o.CreatedDate as OrderDate,p.ProductName,concat(c.FirstName,' ',c.LastName) as CustomerName, (o.CODAmount+o.ShippingCost) as TotalCOD,
		c.Cell1,c.Cell2,c.ShippingAddress,c.City,p.isnewthankpage
		from orders o 
		join orderstatus os on o.OrderStatusId = os.OrderStatusId
		join product p on o.ProductId=p.ProductId
		join customer c on o.customerid = c.CustomerId
		where o.isdelete=0
		and os.OrderStatusId=".$params['orderstatusid']."
		order by o.OrderId desc
		limit ".$params['limit']." offset ".$params['offset']."")->result_array();
		}
		else{
			return $this->db->query("select o.OrderId,os.OrderStatus,o.ProductVariation,o.OrderNotes,o.CreatedDate as OrderDate,p.ProductName,concat(c.FirstName,' ',c.LastName) as CustomerName, (o.CODAmount+o.ShippingCost) as TotalCOD,
		c.Cell1,c.Cell2,c.ShippingAddress,c.City,p.isnewthankpage
		from orders o 
		join orderstatus os on o.OrderStatusId = os.OrderStatusId
		join product p on o.ProductId=p.ProductId
		join customer c on o.customerid = c.CustomerId
		where o.isdelete=0
		
		order by o.OrderId desc
		limit ".$params['limit']." offset ".$params['offset']."")->result_array();
		}
        
    }
        
    /*
     * function to add new order
     */
    function add_order($params)
    {
        $this->db->insert('orders',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update order
     */
    function update_order($OrderId,$params)
    {
        $this->db->where('OrderId',$OrderId);
        return $this->db->update('orders',$params);
    }
	
	function update_order_status($OrderId,$orderStatusId)
    {
        $this->db->where('OrderId',$OrderId);
		
		$params = array("OrderStatusId"=>$orderStatusId);
		
        return $this->db->update('orders',$params);
    }
    
    /*
     * function to delete order
     */
    function delete_order($OrderId)
    {
		
		$this->db->where('OrderId',$OrderId);
        return $this->db->update('orders',array("isdelete"=>1));
		
    }
	
	function GetKarachiOrderList()
	{
		
		
		$query = "select o.OrderId,c.FirstName as Consignee,
		concat(c.ShippingAddress,'(','Famous Place:',c.NearMostFamousPlace,')') as ShippingAddress, 
		c.City,
		c.Cell1,
		c.Cell2,
		p.ProductName,
		(o.CODAmount+o.ShippingCost) as TotalCOD				
		from orders o
		join orderstatus os on o.OrderStatusId = os.OrderStatusId
		join product p on o.ProductId=p.ProductId
		join customer c on o.customerid = c.CustomerId
		where o.isdelete=0
		and os.OrderStatusId=5
		order by o.OrderId desc
		";
		
		return $this->db->query($query)->result();
	}
	
	function GetOrderDetailReport($fromDate,$toDate,$orderStatusId)
	{
		
		$where="(";
		foreach($orderStatusId as $orderStatus)
		{
			$where = $where."o.orderstatusid='".$orderStatus."' or ";			
		}
		$where=substr($where, 0, strlen($where) - 3);
		
		$where = $where.")";		
		return $this->db->query("select o.OrderId,c.FirstName as `Customer Name`,c.Email,c.Cell1,c.ShippingAddress,c.City,p.ProductName,os.OrderStatus
		from orders o
		join customer c on o.customerid=c.customerid
		join product p on o.productid=p.productid
		join orderstatus os on o.orderstatusid=os.orderstatusid
		where cast(o.createddate as date)>='".$fromDate."'
		and cast(o.createddate as date)<='".$toDate."'
		and ".$where."
		
		");
		
		//$this->db->get_compiled_select();
		//echo $this->db->last_query(); 
		//die();
		
	}
	
	function GetProductPurchaseReport($fromDate,$toDate,$orderStatusId)
	{
		
		$where="(";
		foreach($orderStatusId as $orderStatus)
		{
			$where = $where."o.orderstatusid='".$orderStatus."' or ";			
		}
		$where=substr($where, 0, strlen($where) - 3);
		
		$where = $where.")";		
		return $this->db->query("select concat(p.ProductName,o.ProductVariation)as ProductName,count(o.productid) as `Count`
		from orders o		
		join product p on o.productid=p.productid		
        
		where cast(o.createddate as date)>='".$fromDate."'
		and cast(o.createddate as date)<='".$toDate."'
		and ".$where."
		 group by p.productname,o.ProductVariation
		");
		
		//$this->db->get_compiled_select();
		//echo $this->db->last_query(); 
		//die();
		
	}
}
